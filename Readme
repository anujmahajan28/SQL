=IF(AND(C3=TRUE, D3=TRUE), "Both", IF(AND(C3=TRUE, D3=FALSE), "Only Global", IF(AND(C3=FALSE, D3=TRUE), "Only China", "Not Used")))

SNO
Command
Syntax
Comments
1
SELECT
SELECT column1, column2 FROM table_name;
Retrieves data from one or more tables.
2
WHERE
SELECT * FROM table_name WHERE condition;
Filters records based on a condition.
3
AND
SELECT * FROM table_name WHERE condition1 AND condition2;
Combines two conditions; both must be true.
4
OR
SELECT * FROM table_name WHERE condition1 OR condition2;
Combines two conditions; either can be true.
5
ORDER BY
SELECT * FROM table_name ORDER BY column1 ASC/DESC;
Sorts the result set in ascending or descending order.
6
JOIN (INNER JOIN)
SELECT columns FROM table1 INNER JOIN table2 ON table1.id = table2.id;
Combines rows from two tables based on related columns.
7
LEFT JOIN
SELECT columns FROM table1 LEFT JOIN table2 ON table1.id = table2.id;
Returns all rows from the left table, and matched rows from the right table.
8
RIGHT JOIN
SELECT columns FROM table1 RIGHT JOIN table2 ON table1.id = table2.id;
Returns all rows from the right table, and matched rows from the left table.
9
GROUP BY
SELECT column, COUNT(*) FROM table_name GROUP BY column;
Groups rows that have the same values into summary rows.
10
HAVING
SELECT column, COUNT(*) FROM table_name GROUP BY column HAVING COUNT(*) > 1;
Filters groups based on a condition.
11
INSERT INTO
INSERT INTO table_name (column1, column2) VALUES (value1, value2);
Adds new rows into a table.
12
UPDATE
UPDATE table_name SET column1 = value1 WHERE condition;
Modifies existing records.
13
DELETE
DELETE FROM table_name WHERE condition;
Removes records from a table.
14
CREATE TABLE
CREATE TABLE table_name (column1 datatype, column2 datatype);
Creates a new table in the database.
15
ALTER TABLE
ALTER TABLE table_name ADD column_name datatype;
Adds, deletes, or modifies columns in an existing table.
16
DROP TABLE
DROP TABLE table_name;
Deletes an entire table.
17
DISTINCT
SELECT DISTINCT column1 FROM table_name;
Removes duplicate values.
18
IN
SELECT * FROM table_name WHERE column_name IN (value1, value2);
Matches any value in a list.
19
BETWEEN
SELECT * FROM table_name WHERE column_name BETWEEN value1 AND value2;
Selects values within a range.
20
LIKE
SELECT * FROM table_name WHERE column_name LIKE 'pattern';
Searches for a pattern in a column.
21
UNION
SELECT column1 FROM table1 UNION SELECT column1 FROM table2;
Combines result sets and removes duplicates.
22
EXISTS
SELECT * FROM table_name WHERE EXISTS (SELECT * FROM another_table WHERE condition);
Checks for the existence of rows.
23
NOT IN
SELECT * FROM table_name WHERE column_name NOT IN (value1, value2);
Filters records that do not match any value in a list.
24
IS NULL
SELECT * FROM table_name WHERE column_name IS NULL;
Filters records with NULL values in a column.
25
IS NOT NULL
SELECT * FROM table_name WHERE column_name IS NOT NULL;
Filters records that do not have NULL values in a column.
26
CASE
SELECT column_name, CASE WHEN condition THEN result ELSE result END AS alias FROM table_name;
Provides conditional logic in queries.
27
LIMIT
SELECT * FROM table_name LIMIT number;
Limits the number of records returned.
28
OFFSET
SELECT * FROM table_name LIMIT number OFFSET number;
Skips a specified number of records and returns the next set.
29
TRUNCATE
TRUNCATE TABLE table_name;
Removes all records from a table but retains its structure.
30
RENAME
ALTER TABLE old_table_name RENAME TO new_table_name;
Renames a table.
31
ADD COLUMN
ALTER TABLE table_name ADD column_name datatype;
Adds a new column to an existing table.
32
DROP COLUMN
ALTER TABLE table_name DROP COLUMN column_name;
Deletes a column from a table.
33
MODIFY COLUMN
ALTER TABLE table_name MODIFY COLUMN column_name new_datatype;
Changes the datatype or constraints of a column.
34
CREATE INDEX
CREATE INDEX index_name ON table_name (column_name);
Creates an index on a table to improve query performance.
35
DROP INDEX
DROP INDEX index_name;
Deletes an index from a table.
36
ALTER INDEX
ALTER INDEX index_name RENAME TO new_index_name;
Renames an existing index.
37
SAVEPOINT
SAVEPOINT savepoint_name;
Creates a savepoint in a transaction for rollbacks.
38
ROLLBACK TO SAVEPOINT
ROLLBACK TO SAVEPOINT savepoint_name;
Rolls back the transaction to a specific savepoint.
39
COMMIT
COMMIT;
Saves all changes made during a transaction.
40
EXPLAIN
EXPLAIN SELECT * FROM table_name;
Provides query execution details, useful for performance tuning.
41
SHOW
SHOW TABLES;
Lists all tables in the current database.
42
DESCRIBE
DESCRIBE table_name;
Provides structure information about a table.
43
UNION ALL
SELECT column1 FROM table1 UNION ALL SELECT column1 FROM table2;
Combines result sets and includes duplicates.
44
CROSS JOIN
SELECT * FROM table1 CROSS JOIN table2;
Returns the Cartesian product of two tables.
45
FULL OUTER JOIN
SELECT * FROM table1 FULL OUTER JOIN table2 ON table1.id = table2.id;
Combines rows from both tables, including unmatched rows.
46
LEFT OUTER JOIN
SELECT * FROM table1 LEFT OUTER JOIN table2 ON table1.id = table2.id;
Combines rows from left table and matched rows from the right table.

I’ve been practicing various SQL queries and regularly updating my sheet with new commands and syntax. This sheet reflects my ongoing learning and will serve as a reference for future work.

I hope you’re doing well.

I wanted to request a change in my WFH schedule for this 


| S.No | Module Name       | Global UAT | China UAT |
|———|—————————|——————|—————|
| 1    | Deal Origination  | YES        | NO        |
| 2    | Simulations       | YES        | YES       |
| 3    | Requests          | YES        | YES       |
| 4    | Contracts         | YES        | YES       |
| 5    | Client View       | YES        | YES       |
| 6    | Covenants         | YES        | YES       |
| 7    | Workflow          | YES        | YES       |
| 8    | Asset             | YES        | YES       |
| 9    | Syndication       | YES        | NO        |
| 10   | Spread Auto       | YES        | NO        |
| 11   | Leverage          | YES        | NO        |
| 12   | Market Facilities | YES        | NO        |
| 13   | Recovery          | YES        | NO        |
| 14   | Reporting         | YES        | NO        |
t
=COUNTIF(C3:C16, TRUE)/COUNTA(C3:C16)
=COUNTIF(D3:D16, TRUE)/COUNTA(D3:D16)
Hi Chandra,

Please find attached the updated Excel sheet listing the UAT modules mapped for both Global and China environments.
The sheet includes the module availability across both regions, along with totals and a clear distinction between common and exclusive modules.

Let me know if any changes are required or if further details are needed.

Best regards,
[Your Name]
Metric
Value Formula
Total Global Modules
=COUNTIF(C3:C16, TRUE)
Total China Modules
=COUNTIF(D3:D16, TRUE)
Common Modules
=COUNTIFS(C3:C16, TRUE, D3:D16, TRUE)
Exclusive to Global
=COUNTIFS(C3:C16, TRUE, D3:D16, FALSE)
Exclusive to China
=COUNTIFS(C3:C16, FALSE, D3:D16, TRUE)

=IF(AND(C3=TRUE, D3=TRUE), "Common", IF(AND(C3=TRUE, D3=FALSE), "Global Only", IF(AND(C3=FALSE, D3=TRUE), "China Only", "Not Used")))


=IF(AND(C3=TRUE, D3=TRUE), "Both", IF(AND(C3=TRUE, D3=FALSE), "Only Global", IF(AND(C3=FALSE, D3=TRUE), "Only China", "None")))
